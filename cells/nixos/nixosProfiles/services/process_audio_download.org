#+title: Process Audio Download

* preface and functionality
** The script is a post-processing job for downloaded transmission torrents.
** The download might not be an audio, so the script should gracefully exit 0 in such a case.
** The download may contain any kind of audio formats, flac/ogg/ape
** The download may contain cue files.
** The download may contain subdirectories with with audio files and cue file
** The download may contain multiple flac/ogg/ape/wav files without a cue file.
** shntool does not work with non-compliant audio.
Ensure, that the input audio file for shntool conforms to:
Channels       : 2
Sample Rate    : 44100
Precision      : 16-bit

If nessesary use ffmpeg command to convert the file, before splitting into tracks.
#+begin_src bash
ffmpeg -i "$input_audio_file" -ar 44100 -ac 2 -c:a pcm_s16le "$output_audio_file"
#+end_src
** If cue file is found, then the script will split the audio based on the cue and then convert each track into 128k bitrate mp3.
** If no cue file is present, then the script will convert any found audio files into 128k bitrate mp3.
** The end result of running the script should always be mp3 (128k) files named as "Artist - Album - Track number - Track name".mp3
* script technical requirements
** The script should be written in bash.
** Whatever the result of any individual operation, the script must always exit 0
exiting with error breaks transmission systemd service.
** The script must be able to handle downloads with multiple subdirectories filled with audio images and cue files or individual tracks.
** Use linux find command to fill a bash array and then walk this array. Possible to use readarray.
#+begin_src bash
some_array=$(find $path -name *.{} -type f -print0)
#+end_src
** Never use "while IFS= "
** The script should conform to shellcheck - shellcheck should not produce any warning or errors.
** The script should be split into concise single responsibility functions.
** The script may use the following linux cli utilities:
1. sox
2. flac
3. mp3splt
4. id3v2
5. shntool
6. cuetools
7. vorbis-tools
8. ffmpeg
* script general control flow
1. Check that the download has audio files of any kind, otherwise exit 0
2. Determine if we're dealing with an audio image or individual tracks. Look for a .cue file.
3. If a cue file of the same name found, then check that the audio file conforms to shntool accepted format.
4. If needed, first convert the audio image to shntool compliant format.
5. Split the audio image into tracks with shntool, based on the provided .cue file.
6. Convert each track into mp3 128k bitrate.
7. Remove the source files, leaving only the mp3.
#+begin_src bash
main() {
  local input_dir

  if [[ $# -eq 0 ]]; then
    if [[ -z $TR_TORRENT_DIR || -z $TR_TORRENT_NAME ]]; then
      echo "Error: Must provide input directory or set Transmission variables." >&2
      exit 1
    fi
    input_dir="$TR_TORRENT_DIR/$TR_TORRENT_NAME"
  elif [[ $# -eq 1 ]]; then
    input_dir="$1"
  else
    echo "Usage: $0 /path/to/your/music/collection"
    exit 1
  fi

  if [[ -d "$input_dir" ]]; then
    process_directory "$input_dir"
  fi
}
#+end_src
