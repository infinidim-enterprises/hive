#+STARTUP: overview indent
#+title: Doom Emacs Config
#+email: vod@njk.li
#+author: VOD
#+options: H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t pri:t
#+tags: GTD(G) writing(w) export(e) manage(m) graphical(g) nix(n)

* startup
:PROPERTIES:
:ID:       e5bbebcf-8764-43df-a74a-ce89c7e170d7
:END:
** init
:PROPERTIES:
:header-args: :tangle init.el
:VISIBILITY: folded
:ID:       78f1630d-4b2c-4487-b8fd-a6988e388f5d
:END:

#+begin_src emacs-lisp
(doom! :input
       :completion
       (corfu
        +orderless
        +icons
        +dabbrev
        +dict)
       ;; company          ; the ultimate code completion backend
       (helm +fuzzy)       ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)    ; the search engine of the future

       :ui
       deft                ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       ;; doom-dashboard   ; a nifty splash screen for Emacs
       ;; doom-quit        ; DOOM quit-message prompts when you quit Emacs
       ;; (emoji
       ;;  +unicode
       ;;  +github)           ; 🙂
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;; indent-guides    ; highlighted indent columns
       (ligatures
        +extra
        +pragmata-pro)     ; ligatures and symbols to make your code pretty again
       minimap             ; show a map of the code on the side
       modeline            ; snazzy, Atom-inspired modeline, plus API
       nav-flash           ; blink cursor line after big motions
       ;; neotree          ; a project drawer, like NERDTree for vim
       (treemacs +lsp)     ; a project drawer, like neotree but cooler
       ophints             ; highlight the region an operation acts on
       (popup
        +all
        +defaults)         ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;; unicode          ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       ;; vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       ;;(evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors    ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text         ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       word-wrap           ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)      ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       (ibuffer
        :config
        ibuffer-group-buffers-by 'projects) ; interactive buffer management
       (undo +tree)        ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       eshell              ; the elisp shell that works everywhere
       vterm               ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe); tasing you for every semicolon you forget
       (spell +aspell
              +flyspell
              +everywhere) ; tasing you for misspelling mispelling
       grammar             ; tasing grammar mistake every you make

       :tools
       biblio
       ;; TODO: https://github.com/doomemacs/doomemacs/tree/master/modules/tools/biblio
       ;;ansible
       (debugger +lsp)     ; FIXME stepping through code, to help you add bugs
       direnv
       (docker +lsp)
       editorconfig        ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       gist                ; interacting with github gists
       (lookup
        +dictionary
        +docsets)          ; navigate your code and its documentation
       (lsp +peek)         ; M-x vscode
       ;; tree-sitter
       (magit +forge)      ; a git porcelain for Emacs
       make                ; run make tasks from Emacs
       (pass +auth)              ; password manager for nerds
       pdf                 ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb                 ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload              ; map local to remote projects via ssh/ftp

       :os
       tty                 ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;cc                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp         ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       crystal             ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data                ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;; dhall
       ;;elixir            ; erlang done right
       ;; elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)           ; the hipster dialect
       ;; (graphql +lsp)
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       (json +lsp)         ; At least it ain't XML
       ;; (java
       ;;  +lsp
       ;;  +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex +lsp)        ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       (markdown +grip)    ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       (nix +lsp)
       ;;ocaml             ; an objective camel
       (org
        +brain
        +dragndrop
        +gnuplot
        +pandoc
        +crypt
        +journal
        ;; +jupyter
        +hugo
        +pomodoro
        +roam2
        +noter
        +present)          ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       plantuml            ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python
        +cython
        +pyenv
        +poetry
        +lsp
        +pyright)          ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest                ; Emacs as a REST client
       ;;rst               ; ReST in peace
       (ruby
        +rails
        +lsp
        +rbenv)            ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust
        +lsp)
       ;;scala             ; java, but good
       ;; (scheme +guile)   ; a fully conniving family of lisps
       (sh +lsp)           ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web
        +lsp)              ; the tubes
       (yaml
        +lsp)              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       (wanderlust +gmail)

       :app
       calendar
       ;;emms
       everywhere        ; *leave* Emacs!? You must be joking
       irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       (default
        +bindings
        +smartparens)
       ;; :private
       ;; spacemacs-default
       ;; BROKEN: (nix +lsp)
       ;; my-org
       ;; my-code
       )

;; https://discourse.doomemacs.org/t/using-lsp-use-plists-with-doom/2832
;; (setenv "LSP_USE_PLISTS" "1")

;; needs to put this in init.el
;; https://github.com/hlissner/doom-emacs/issues/401
;; (setq evil-respect-visual-line-mode nil)
;; (setq straight-vc-git-default-clone-depth 'full)
;; (add-hook 'tty-setup-hook (lambda () (load! "./tty/config.el")))
(defalias 'defgeneric 'cl-defgeneric)

;; don't resize based on fonts etc, make the startup faster
;; https://tony-zorman.com/posts/2022-10-22-emacs-potpourri.html
(setq frame-inhibit-implied-resize nil)

;; aot native compile
;; https://github.com/doomemacs/doomemacs/issues/6811
;; (setq native-comp-deferred-compilation nil)
(setq straight-vc-git-default-protocol 'https)
(setq native-compile-jit-compilation nil)
(after! (doom-packages straight)
  (setq straight--native-comp-available t))
#+end_src
** Tracing and debugging emacs
:PROPERTIES:
:ID:       894d9c7c-5d67-41ab-906d-98ad686fff30
:END:
#+begin_src emacs-lisp :tangle config.el
(defun log-auth-source-access (orig-fun &rest args)
  "Advice function to log auth-source access with backtrace."
  (let* ((bt (with-output-to-string
               (backtrace)))
         (caller (cl-loop for frame in (backtrace-frames)
                          for i from 0 to 30  ; Limit stack depth
                          for fn = (cl-second frame)
                          unless (or (string-prefix-p "auth" (symbol-name fn))
                                    (memq fn '(apply funcall)))
                          return fn)))
    (message "Auth-source access triggered by: %s\nBacktrace:\n%s"
             (or caller 'unknown) bt)
    (apply orig-fun args)))

;; Add advice to auth-source main entry point
;; (advice-add 'auth-source-search :around #'log-auth-source-access)

;; To remove the tracing later:
;; (advice-remove 'auth-source-search #'log-auth-source-access)
#+end_src
** setup nvfetcher integration
:PROPERTIES:
:ID:       7f4b09a5-0c25-4ebf-95b8-a411f2fa497c
:END:
It's actually pretty hard to make it work properly.

the nix-doom-emacs-unstraightened collects package information by itself, so the variables from nvfetcher-pins aren't evaluated or even present.

#+begin_src emacs-lisp
(package! nvfetcher-pins :built-in t)
;; (load-file "/nix/store/jhcnd8nssl3gkxfpa9ja3ms291vn36xc-nvfetcher-pins")
#+end_src

#+begin_src emacs-lisp
;; (use-package! nvfetcher-pins)
#+end_src

* Usability improvements
:PROPERTIES:
:ID:       15e3b0d6-34e4-48e4-a966-c1cb53665efd
:END:
** frames/emacsclient
:PROPERTIES:
:ID:       3f3972b2-472c-4594-95ff-a143dd74efbd
:END:
#+begin_src emacs-lisp :tangle config.el
(after! persp-mode
  (setq! persp-initial-frame-name "master"))
;; persp-emacsclient-init-frame-behaviour-override "master"
;; 2. Rename the initial workspace on startup
(add-hook 'window-setup-hook
          (lambda ()
            (when (and (fboundp 'persp-curr)
                       (persp-curr)
                       (not (persp-get-by-name persp-initial-frame-name)))
              (persp-rename persp-initial-frame-name))))

#+end_src
** General
:PROPERTIES:
:ID:       a0eed0db-46dd-49d4-9411-78e9d95e2c67
:END:
Maybe use (package! maple-iedit :recipe (:host github :repo "honmaple/emacs-maple-iedit")) instead of built-in mc/mark-next-like-this

#+begin_src emacs-lisp :tangle packages.el
(package! rainbow-mode) ;; Colorize color names in buffers
(package! docker-tramp :disable t) ;; Obsolete
#+end_src

[[https://github.com/doomemacs/doomemacs/issues/6463][emmet-mode conflicts with copilot]]

#+begin_src emacs-lisp :tangle config.el
(defun ++popup-messages (arg)
  (interactive "P")
  (if arg
      (+popup-buffer (get-buffer "*Messages*"))
    (+popup-buffer (get-buffer "*Messages*") '((quit . t)))))

(defun +doom/toggle-line-numbers ()
  "Toggle line numbers.

Cycles through regular, relative and no line numbers. The order depends on what
`display-line-numbers-type' is set to. If you're using Emacs 26+, and
visual-line-mode is on, this skips relative and uses visual instead.

See `display-line-numbers' for what these values mean."
  (interactive)
  (defvar doom--line-number-style display-line-numbers-type)
  (let* ((styles `(t ,(if visual-line-mode 'visual t) nil))
         (order (cons display-line-numbers-type (remq display-line-numbers-type styles)))
         (queue (memq doom--line-number-style order))
         (next (if (= (length queue) 1)
                   (car order)
                 (car (cdr queue)))))
    (setq doom--line-number-style next)
    (setq display-line-numbers next)
    (message "Switched to %s line numbers"
             (pcase next
               (`t "normal")
               (`nil "disabled")
               (_ (symbol-name next))))))

(defun ++projectile-switch-project-and-rename-workspace ()
  "Switch to a project's magit-status buffer and prompt for new workspace name

This is for per workspace each task setup"
  (interactive)
  (require 'projectile)
  (let ((projectile-current-project-on-switch 'keep)
        (+workspaces-switch-project-function #'magit-status))
    (call-interactively #'projectile-switch-project)))

(defmacro log/spy (form)
  "Evaluate FORM and return its result.
Additionally, print a message to the *Messages* buffer showing
the form and its result.

This macro is useful for debugging and inspecting the
intermediate results of Elisp code without changing your code
structure. Just wrap the form with `im-tap' that you want to see
it's output without introducing an intermediate let-form."
  `(let ((result ,form))
     (message "[spy :: %s] → %s" ,(prin1-to-string form) result)
     result))

(defun log/debug (thing)
  "Like `im-tap' but uses `pp-display-expression' to display the
result instead of `message'."
  (pp-display-expression thing "*im-debug*")
  thing)

(defun ++clojure-keywordp (s)
  (and
   (stringp s)
   (s-starts-with? ":" s)
   (not (s-contains? " " s))))

(use-package! rainbow-mode
  :hook (prog-mode . rainbow-mode))

(setq! package-native-compile t
       confirm-kill-processes nil
       consult-tramp-method "sshx"
       custom-file (expand-file-name "doom_custom.el" (getenv "XDG_DATA_HOME")))

(map! :after emmet-mode [tab] nil)

(use-package! helm-projectile
  :defer t
  :config
  (defun local/helm-buffer-transformer (buffers)
    "Transformer function to display project buffers with full file paths, excluding internal buffers."
    (let* ((filtered-buffers
            (cl-remove-if
             (lambda (buf)
               (or (string-prefix-p "*" (buffer-name buf))
                   (eq buf (current-buffer))))
             buffers))
           (max-name-length
            (apply #'max
                   (mapcar (lambda (buf)
                             (length (buffer-name buf)))
                           filtered-buffers)))
           (max-mode-length
            (apply #'max
                   (mapcar (lambda (buf)
                             (length (symbol-name (with-current-buffer buf major-mode))))
                           filtered-buffers))))
      (cl-loop for buffer in filtered-buffers
               for name = (buffer-name buffer)
               for size = (buffer-size buffer)
               for mode = (with-current-buffer buffer major-mode)
               for path = (or (buffer-file-name buffer) "")
               collect
               (cons (format (format "%%-%ds %%7s %%-%ds %%s"
                                     max-name-length
                                     max-mode-length)
                             name
                             (file-size-human-readable size)
                             mode
                             (abbreviate-file-name path))
                     buffer))))

  (defun local/helm-source-project-buffers-list ()
    "Create a Helm source for project buffer switching with full file paths."
    (helm-build-sync-source "Project Buffers"
      :candidates (local/helm-buffer-transformer (projectile-project-buffers))
      :action '(("Switch to buffer" . (lambda (candidate)
                                        (switch-to-buffer candidate))))
      :fuzzy-match t))

  (defun local/helm-switch-to-project-buffer ()
    "Switch to project buffer with full file path search and formatted display."
    (interactive)
    (helm :sources (local/helm-source-project-buffers-list)
          :prompt (format "[%s] Switch to buffer: " (+workspace-current-name))
          :buffer "*helm project buffers*"))
  :bind ("C-x b" . local/helm-switch-to-project-buffer))
#+end_src
** TODO SFS Search/Indexing
:PROPERTIES:
:ID:       dfee529a-ba11-4238-8355-9d28ec8344ce
:END:
[[https://github.com/Overdr0ne/sfs][Search File System]]
** hl-todo
:PROPERTIES:
:ID:       beda4954-a0a7-458b-9a6a-284a4405a70a
:END:
#+begin_src emacs-lisp :tangle config.el
(use-package! hl-todo
  :config
  (setq! hl-todo-keyword-faces
      `(;; For things that need to be done, just not today.
        ("TODO" warning bold)
        ;; For problems that will become bigger problems later if not
        ;; fixed ASAP.
        ("FIXME" error bold)
        ;; Most of code is shite, especially on github
        ;; Stale PRs and other crap we can't always influence directly
        ("ISSUE" warning bold)
        ;; For tidbits that are unconventional and not intended uses of the
        ;; constituent parts, and may break in a future update.
        ("HACK" font-lock-constant-face bold)
        ;; For things that were done hastily and/or haven't been thoroughly
        ;; tested. It may not even be necessary!
        ("REVIEW" font-lock-keyword-face bold)
        ;; For especially important gotchas with a given implementation,
        ;; directed at another user other than the author.
        ("NOTE" success bold)
        ;; For things that just gotta go and will soon be gone.
        ("DEPRECATED" font-lock-doc-face bold)
        ;; For a known bug that needs a workaround
        ("BUG" error bold)
        ;; For warning about a problematic or misguiding code
        ("XXX" font-lock-constant-face bold))))
#+end_src
** dired stuff
:PROPERTIES:
:ID:       679d25b9-dcd9-492c-a50b-b5c1a3bc12f1
:END:
the treemacs and neotree suck donkey balls.
#+begin_src emacs-lisp :tangle packages.el
;; (package! f)
;; (package! s)
;; (package! dired-hacks-utils)

(package! dired-sidebar
  :type 'core
  :pin "3bc8927ed4d14a017eefc75d5af65022343e2ac1"
  :recipe (:host github
           :repo "jojojames/dired-sidebar"
           :branch "master"))
(package! ibuffer-sidebar
  :type 'core
  :pin "fb685e1e43db979e25713081d8ae4073453bbd5e"
  :recipe (:host github
           :repo "jojojames/ibuffer-sidebar"
           :branch "master"))
;; (package! dired-hacks
;;   :type 'core
;;   :pin "e9e408e8571aee5574ca0a431ef15cac5a3585d4"
;;   :recipe (:host github
;;            :repo "Fuco1/dired-hacks"
;;            :branch "master"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! nerd-icons :defer t)
(use-package! nerd-icons-dired
  :commands (nerd-icons-dired-mode)
  :init
  (setq! dired-sidebar-theme 'nerd-icons))

(use-package! dired-sidebar
  :bind (("s-t" . dired-sidebar-toggle-sidebar))
  :commands (dired-sidebar-toggle-sidebar)
  :defer
  :hook (dired-sidebar-mode . (lambda () (unless (file-remote-p default-directory)
                                           (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

  (setq! ;; dired-sidebar-subtree-line-prefix "__"
         dired-sidebar-theme 'nerd-icons
         ;; dired-sidebar-use-custom-font t
         dired-sidebar-use-term-integration t
         dired-sidebar-width 25
         dired-sidebar-tui-update-delay 5
         dired-sidebar-recenter-cursor-on-tui-update t
         dired-sidebar-no-delete-other-windows t
         dired-sidebar-use-custom-modeline t)
  (map! :map dired-sidebar-mode-map
        :n "q" #'dired-sidebar-toggle-sidebar))

(use-package! dired-subtree
  :config
  (setq! dired-subtree-cycle-depth 4
         dired-subtree-line-prefix ">")
  (map! :map dired-mode-map
        [backtab] #'dired-subtree-cycle
        [tab] #'dired-subtree-toggle
        :n "g^" #'dired-subtree-beginning
        :n "g$" #'dired-subtree-end
        :n "gm" #'dired-subtree-mark-subtree
        :n "gu" #'dired-subtree-unmark-subtree))
#+end_src
** Rainbow delimiters
:PROPERTIES:
:ID:       78487c34-5fb7-4eb7-baa6-a5a9a1573921
:END:
[[https://github.com/Civitasv/pair-colorizer][Use a fork]]?

#+begin_src emacs-lisp :tangle packages.el
(package! rainbow-delimiters
  :type 'core
  :pin "f40ece58df8b2f0fb6c8576b527755a552a5e763"
  :recipe (:host github
           :repo "Fanael/rainbow-delimiters"
           :branch "master"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** org-mode and friends
:PROPERTIES:
:ID:       09b4214f-fa09-4a58-869c-21bb2a84bb1a
:END:
*** General goodness
:PROPERTIES:
:ID:       03f692ae-8272-4ebb-8376-f5f634f4d5ba
:END:
[[https://github.com/EFLS/zetteldeft][Deft as Zettelkasten note-taking system]]

#+begin_src emacs-lisp :tangle packages.el
(package! zetteldeft :recipe (:host github :repo "EFLS/zetteldeft"))
(package! ox-jekyll-md)
(package! org-ql)
(package! helm-org-rifle)
(package! org-books)
;; (package! org-pretty-table)
(package! org-mime)
(package! org-rich-yank)
;; (package! ob-solidity)
;; (package! ob-async)
;; (package! ob-hugo)
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;; ~/.doom.d/config.el

(after! org
  (add-to-list 'org-modules 'org-id)

  (defun local/org-add-ids-to-headlines-in-file ()
    "Add `:ID:` properties to all headlines in the current Org buffer."
    (org-map-entries #'org-id-get-create))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'before-save-hook
                        #'local/org-add-ids-to-headlines-in-file
                        nil  ; append
                        t)))) ; buffer-local

(use-package! ox-jekyll-md)
(use-package! org-ql)
(use-package! helm-org-rifle)
;;(use-package! org-pretty-table
;;  :after org-mode
;;  :commands (org-pretty-table-mode global-org-pretty-table-mode)
;;  :hook (org-mode . org-pretty-table-mode))
(use-package! org-mime
  :config (setq org-mime-library 'semi))

(use-package! org-rich-yank
  :bind (:map org-mode-map
         ("C-M-y" . org-rich-yank)))

(use-package! org-books
  :config
  (setq org-books-file (concat org-directory "/library.org")))

(use-package! deft
  :custom
    (deft-extensions '("org" "md" "txt"))
    (deft-use-filename-as-title t))

(use-package! zetteldeft
  :after deft
  :config (zetteldeft-set-classic-keybindings))
#+end_src
*** org-capture
:PROPERTIES:
:ID:       ae25876b-1cd6-4c2e-93e7-6000cc5c7b02
:END:
There's a better way of doing this, maybe :config section in use-package!

#+begin_src emacs-lisp :tangle packages.el
(package! doct)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat
  (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform)))

(use-package! doct
  :commands (doct))

(use-package! org-capture
  :custom org-capture-templates
           (doct `(("Personal todo"
                    :keys "t"
                    :headline "Inbox"
                    :prepend t
                    :file +org-capture-todo-file
                    :template ("* [ ] %?\n%i\n%a"))
                   ("Personal notes"
                    :keys "n"
                    :headline "Inbox"
                    :prepend t
                    :file +org-capture-notes-file
                    :template ("* %u %?\n%i\n%a"))
                   ("Journal"
                    :keys "j"
                    :prepend t
                    :file +org-capture-journal-file
                    :template ("* %U %?\n%i\n%a"))

                   ("Protocol"
                    :keys "c"
                    :headline "Inbox"
                    :prepend t
                    :file +org-capture-notes-file
                    :template ("* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?"))
                   ("Protocol link"
                    :keys "x"
                    :headline "Inbox"
                    :prepend t
                    :file +org-capture-notes-file
                    :template ("* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n"))

                   ;; ("Centralized templates for projects"
                   ;;  :keys "o"
                   ;;  :prepend t
                   ;;  :children (("Project todo"
                   ;;              :keys "t"
                   ;;              :heading "Tasks"
                   ;;              :prepend nil
                   ;;              :file #'+org-capture-central-project-todo-file
                   ;;              :template ("* TODO %?\n %i\n %a"))
                   ;;             ("Project notes"
                   ;;              :keys "n"
                   ;;              :heading "Notes"
                   ;;              :file #'+org-capture-central-project-notes-file
                   ;;              :template ("* %U %?\n %i\n %a"))
                   ;;             ("Project changelog"
                   ;;              :keys "c"
                   ;;              :heading "Changelog"
                   ;;              :file #'+org-capture-central-project-changelog-file
                   ;;              :template ("* %U %?\n %i\n %a"))))

                   ("Templates for projects"
                    :keys "r"
                    :prepend t
                    :headline "Inbox"
                    :children (("Project-local todo"
                                :keys "t"
                                :template ("* TODO %?\n%i\n%a")
                                :file +org-capture-project-todo-file)
                               ("Project-local notes"
                                :keys "n"
                                :template ("* %U %?\n%i\n%a")
                                :file +org-capture-project-notes-file)
                               ("Project-local changelog"
                                :keys "c"
                                :headline "Unreleased"
                                :template ("* %U %?\n%i\n%a")
                                :file +org-capture-project-changelog-file))))))
#+end_src
*** TODO orgfu
:PROPERTIES:
:ID:       3441cd3c-b0d0-4abb-baf5-e5c4d1070115
:END:
- [[https://github.com/abo-abo/org-fu/blob/master/org-fu.el][Example here]]

- counsel package is an orca requirement, because it does things with git
#+begin_src emacs-lisp :tangle packages.el
(package! counsel)
(package! orca)
#+end_src

[[https://github.com/abo-abo/orca][Orca]] is nice, but it needs proper customization

#+begin_src emacs-lisp :tangle config.el
(use-package! counsel)
(use-package! orca
  ;; :config
  ;; (setq orca-handler-list
  ;;       '((orca-handler-match-url
  ;;          "https://www.reddit.com/emacs/"
  ;;          "~/Dropbox/org/wiki/emacs.org"
  ;;          "Reddit")
  ;;         (orca-handler-match-url
  ;;          "https://emacs.stackexchange.com/"
  ;;          "~/Dropbox/org/wiki/emacs.org"
  ;;          "\\* Questions")
  ;;         (orca-handler-current-buffer
  ;;          "\\* Tasks")
  ;;         (orca-handler-file
  ;;          "~/Dropbox/org/ent.org"
  ;;          "\\* Articles")))
  )
#+end_src

This is the part that will help with stumpwm integration:
#+begin_src shell
emacsclient -c -e "(setq frame-title-format \"My Frame Title\")"
#+end_src

This is what we want to overwrite with defadvice
#+begin_src emacs-lisp
(defun orca-raise-frame ()
  "Put Emacs frame into focus."
  (if (eq system-type 'gnu/linux)
      (progn
        (orca-require-program "logger")
        (call-process
         "logger" nil nil nil "-t orca_org-capture" "tried_raising_frame"
         (frame-parameter (selected-frame) 'outer-window-id)))
    (raise-frame)))
#+end_src

** Helm - finetune the doom provided stuff
:PROPERTIES:
:ID:       372be095-60cd-41e7-940a-c472ff3230e5
:END:
A nice start here - https://github.com/thierryvolpiatto/emacs-config/blob/main/init-helm.el

helm-swoop can be replaced by (package! ctrlf :recipe (:host github :repo "raxod502/ctrlf"))
#+begin_src emacs-lisp :tangle packages.el
(package! helm-rg)
(package! helm-swoop)
;;(package! helm-locate)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(after! helm-mode
  (customize-set-variable helm-completion-style 'helm-fuzzy))

(use-package! helm-swoop)
(use-package! helm-rg)
(use-package! helm-locate
  :config (setq helm-locate-fuzzy-match t))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! helm-tramp)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! helm-tramp
  :config
  (setq tramp-default-method "ssh"
        make-backup-files nil
        create-lockfiles nil
        helm-tramp-custom-connections '(/ssh:admin@frogstar.0.njk.li:/home/admin/)))
#+end_src

** Terminals
:PROPERTIES:
:ID:       48e90acd-0b41-457d-817c-c1f160d4ed5d
:END:
https://github.com/SqrtMinusOne/eshell-atuin
#+begin_src emacs-lisp :tangle packages.el
;;(package! multi-vterm)
;; (package! vtm)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! vterm :bind (:map vterm-mode-map ("s-j" . vterm-copy-mode)))
;;(use-package! vtm :config (add-to-list 'auto-mode-alist '("\\.vtm\\'" . vtm-mode)))
;;(use-package! multi-vterm
;;  :bind
;;  (:map global-map
;;   ("C-M-<return>" . multi-vterm)
;;   ("s-h" . multi-vterm-prev)
;;   ("s-l" . multi-vterm-next)))
#+end_src
*** Tramp
:PROPERTIES:
:ID:       698ad9a5-678d-498d-9e79-ab74947fd049
:END:
#+begin_src emacs-lisp :tangle config.el
(after! tramp
  ;; tramp sets tramp-default-remote-path via `getconf PATH` which doesn't seem
  ;; to work on NixOS, only returning /run/current-system/sw/bin:/bin:/usr/bin
  ;; this means magit, rg, etc don't work. this fixes the issue
  ;; https://www.gnu.org/software/tramp/#Remote-programs
  (cl-pushnew 'tramp-own-remote-path tramp-remote-path)

  ;; tramp stores .tramp_history in the home directory by default
  (when-let ((data-home (getenv "XDG_DATA_HOME")))
    (setq tramp-histfile-override (expand-file-name "tramp_history" data-home))))
#+end_src
** Poly Mode
:PROPERTIES:
:ID:       564ed708-d137-464c-9db4-8a4e2f51e44d
:END:

- [[https://github.com/ShuguangSun/ess-view-data][ShuguangSun/ess-view-data: View data support for ESS]]

#+begin_src emacs-lisp :tangle packages.el
(package! polymode)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! polymode
:config
  (add-hook 'org-brain-visualize-mode-hook #'org-brain-polymode))
#+end_src

*** Poly Mode Markdown
:PROPERTIES:
:ID:       1918408b-5e43-42e3-aa02-ddff94a0d560
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! poly-markdown :recipe (:build (:not compile)))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! poly-markdown
  :config
  (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown-mode)))
#+end_src

** windsize
:PROPERTIES:
:ID:       395bb9fb-b3b9-484c-9c3c-fc8b5871ec89
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! windsize)
#+end_src

#+begin_src emacs-lisp :tangle config.el
  (use-package! windsize
    :bind (("s-p" . windsize-up)
           ("s-n" . windsize-down)
           ("s-b" . windsize-left)
           ("s-f" . windsize-right))
    :custom
    (windsize-cols 1)
    (windsize-rows 1))
#+end_src

** Magit and friends
:PROPERTIES:
:ID:       7a5ec69b-41ec-4b37-b8ae-ef728779949d
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! gitignore-templates)
(package! magit-todos)
#+end_src

#+begin_src emacs-lisp :tangle config.el
  (use-package! magit-todos
    :hook (magit-status-mode . magit-todos-mode))
(after! magit
  (defun +magit-always-sign-tags (orig-fn &rest args)
    (let ((magit-tag-args (cons "--sign" magit-tag-args)))
      (apply orig-fn args)))
  (advice-add 'magit-create-tag :around #'+magit-always-sign-tags))
#+end_src
** Chat
:PROPERTIES:
:ID:       d0008319-f07b-4709-8c1b-5b5dba5fdd62
:END:
*** matrix
:PROPERTIES:
:ID:       a7c4a19e-6f64-4e83-9f7d-5ff53eebf66f
:END:
#+begin_src emacs-lisp :tangle packages.el
;; (package! ement)
#+end_src

#+begin_src emacs-lisp :tangle config.el
;; (use-package! ement)
#+end_src
*** irc
:PROPERTIES:
:ID:       5e139aaa-d089-41d4-a500-c0492df1641a
:END:
** Completion
:PROPERTIES:
:ID:       e6c74f3f-7c21-4c90-9c72-caae5ba13a11
:END:
*** TODO Github copilot
:PROPERTIES:
:ID:       3133c642-fc2c-4461-949f-1964a5684729
:END:
This fails to build on nix currently
#+begin_src emacs-lisp :tangle packages.el
;; (package! copilot)
#+end_src

#+begin_src emacs-lisp :tangle config.el
;; (use-package! copilot
;;   :config (setq copilot--base-dir (getenv "EMACS_PATH_COPILOT"))
;;   :hook (prog-mode . copilot-mode)
;;   :bind (("C-TAB" . 'copilot-accept-completion-by-word)
;;          ("C-<tab>" . 'copilot-accept-completion-by-word)
;;          :map copilot-completion-map
;;          ("<tab>" . 'copilot-accept-completion)
;;          ("TAB" . 'copilot-accept-completion)))
#+end_src

*** corfu / vertico
:PROPERTIES:
:ID:       c47beba9-64fa-4990-a78e-3dadcec0208b
:END:
For the moment, will go with vendored versions in doomemacs

#+begin_src emacs-lisp :tangle packages.el
(package! vertico
  :type 'core
  :pin "edee5c68972b9270ac4f23b2c34aa43fe4403d52"
  :recipe (:host github
           :repo "minad/vertico"
           :branch "main"))
(package! corfu
  :type 'core
  :pin "6460a3516ba6478114b947d7c18c2b9c5b45d0cc"
  :recipe (:host github
           :repo "minad/corfu"
           :branch "main"))
(package! nerd-icons-corfu
  :type 'core
  :pin "55b17ee20a5011c6a9be8beed6a9daf644815b5a"
  :recipe (:host github
           :repo "LuigiPiucco/nerd-icons-corfu"
           :branch "master"))
(package! cape
  :type 'core
  :pin "f72ebcaeff4252ca0d7a9ac4636d8db0fdf54c55"
  :recipe (:host github
           :repo "minad/cape"
           :branch "main"))
(package! orderless
  :type 'core
  :pin "254f2412489bbbf62700f9d3d5f18e537841dcc3"
  :recipe (:host github
           :repo "oantolin/orderless"
           :branch "main"))
(package! tempel
  :type 'core
  :pin "f52a99ebf6ee52a30d435ef1583dc8df3e5f2ca5"
  :recipe (:host github
           :repo "minad/tempel"
           :branch "main"))
(package! corfu-terminal
  :type 'core
  ;; :pin pin-corfu-terminal
  :pin "501548c3d51f926c687e8cd838c5865ec45d03cc"
  :recipe (:type git
           :repo "https://codeberg.org/akib/emacs-corfu-terminal.git"
           :branch "master"))

;; (package! corfu-doc-terminal
;;   :type 'core
;;   :pin "da5042082d2296946972599f6d95bbbffaf63fba"
;;   :recipe (:type git
;;            :repo "https://codeberg.org/akib/emacs-corfu-doc-terminal.git"
;;            :branch "master"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! vertico)
(use-package! corfu)
(use-package! corfu-terminal)
(use-package! nerd-icons-corfu)
(use-package! cape)
(use-package! orderless)
(use-package! tempel)


(use-package! corfu-terminal
  :init
  (unless (display-graphic-p)
  (corfu-terminal-mode +1)))

;; (use-package! corfu-doc-terminal
;;   :init
;;   (unless (display-graphic-p)
;;   (corfu-doc-terminal-mode +1)))
#+end_src
** IDEA clipboard
:PROPERTIES:
:ID:       c289625d-60cd-4415-acb8-73eec16780f8
:END:
:tangle packages.el
#+begin_src emacs-lisp
(package! clipmon)
#+end_src

:tangle config.el
#+begin_src emacs-lisp
(use-package! clipmon
  :defer
  :config
  (setq clipmon-timer-interval 2))
#+end_src
** devdocs
:PROPERTIES:
:ID:       f23ebb70-63cd-451a-9fca-5df34f5e16ab
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! devdocs)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! devdocs
  :defer
  :bind
  ("C-h D" . devdocs-lookup))
#+end_src
** llm
:PROPERTIES:
:ID:       433a90ca-792c-4de8-bf34-ea42bc930ea4
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! gptel
  :pin "a5af15c770b66a61d0609a736e1db37495655559" ;; Version v0.9.8.5
  ;; :pin "35b752f00bf22682659350f07b4ea5c2dfb9a36b"
  :recipe (:host github
           :repo "karthink/gptel"
           :branch "master"))

(package! ob-aider
  :pin "f611b0e733323c04bbbcab710a78a87f47e5fc74"
  :recipe (:host github
           :repo "localredhead/ob-aider.el"
           :branch "main"))

(package! mcp
  :pin "2fcda27b15395fe1ed55d15a88e6187a69af09e9"
  ;; :pin "d023e4858af5cc4c8cb0a6f28262c88485a06b2b"
  :recipe (:host github
           :repo "lizqwerscott/mcp.el"
           :branch "master"))

;; (package! whisper
;;   :pin "ee29777238fc089d66d8e4b6812fdd5743cad19a"
;;   :recipe (:host github
;;            :repo "natrys/whisper.el"
;;            :branch "master"))

;; NOTE: latest aider requires newer transient. and newer transient needs newer forge and magit.
;; (package! forge
;;   :pin "d139e9ecae6df514dfb3c3ae06115df96a1b8392"
;;   :recipe (:host github
;;            :repo "magit/forge"
;;            :branch "main"))

;; (package! magit
;;   :pin "e3806cbb7dd38ab73624ad48024998705f9d0d20"
;;   :recipe (:host github
;;            :repo "magit/magit"
;;            :branch "main"))

;; (package! transient
;;   :pin "df5856bb960933c91ec391de79f75ecd2cb55e52"
;;   :recipe (:host github
;;            :repo "magit/transient"
;;            :branch "main"))

(package! aider
  ;; "v0.10.0"
  :pin "ddaa748907764694f4a83a35b67bf6584a73e961"
  ;; :pin "d7c2d696444a1438d8a3ddf6a629d743d6c022fe" ;; NOTE: newer commits require newer magit/forge/transient and it breaks stuff
  :recipe (:host github
           :repo "tninja/aider.el"
           :branch "main"
           :files ("*")))

(package! org-ai
  :pin "cc4a4eb778e4689573ebd2d472b8164f4477e8b8"
  :recipe (:host github
           :repo "rksm/org-ai"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
;; (defun +whisper-insert ()
;;   (interactive)
;;   (whisper-run)
;;   (if (y-or-n-p "Trans?")
;;       (progn
;;         (whisper-run)
;;         (when (and (boundp #'gptel-mode) gptel-mode)
;;           (if (y-or-n-p "Query?")
;;               (progn (goto-char (point-max))
;;                      (gptel-send))
;;             (goto-char (point-max)))))
;;     (when (process-live-p whisper--recording-process)
;;       (kill-process whisper--recording-process))))

;; (defun +whisper-run ()
;;   (interactive)
;;   (cond
;;    ((eq current-prefix-arg 1)
;;     (+whisper-zh-lang-model))
;;    ((not current-prefix-arg)
;;     (+whisper-default-lang-model)))
;;   (call-interactively '+whisper-insert))

;; (use-package! whisper
;;   :bind ("s-w" . whisper-run)
;;   :config
;;   (setq! whisper-model "base"
;;          ;; whisper-install-directory "/tmp/"
;;          whisper-language "en"
;;          whisper-translate nil
;;          whisper-install-whispercpp nil
;;          whisper-use-threads (/ (num-processors) 2)))

(use-package! gptel
  :commands (gptel gptel-send)
  :bind (("M-s-<return>" . gptel-send)
         ("M-s-="        . gptel-add))
  :defer t
  :init
  (defun +chat-with-ai ()
    (interactive)
    (cond
     ((and current-prefix-arg (and (boundp #'gptel-mode) gptel-mode))
      (progn
        (call-interactively #'gptel)
        (when-let ((buf (get-buffer gptel-default-session)))
          (with-current-buffer buf
            (call-interactively #'+whisper-run)))))
     ((and (boundp #'gptel-mode) gptel-mode)
      (call-interactively #'+whisper-run))
     (t
      (progn
        (call-interactively #'gptel)
        (when-let ((buf (get-buffer gptel-default-session)))
          (with-current-buffer buf
            (call-interactively #'+whisper-run)))))))

  (defun +gptel-save-buffer (&rest args)
    (interactive)
    (when-let ((buf (current-buffer)))
      (with-current-buffer buf
        (if buffer-file-name
            (save-buffer)
          (write-file
           (format
            (expand-file-name
             "~/Documents/org/gptel/gptel-%s.org")
            (format-time-string
             "%Y%m%d-%H%M%S-%3N")))))))

  (defun +gptel-kill-default-buffer ()
    (interactive)
    (when-let ((buf (get-buffer gptel-default-session)))
      (kill-buffer buf)))

  (defun openrouter-get-model-ids ()
    "Fetch models from OpenRouter API and return a list of model IDs.
Wait up to 30 seconds for the HTTP response. If the timeout expires,
return a default list of model IDs."
    (require 'url)
    (require 'json)
    (let* ((url "https://openrouter.ai/api/v1/models")
           (default-model-ids '(meta-llama/llama-3.3-8b-instruct:free
                                nousresearch/deephermes-3-mistral-24b-preview:free
                                microsoft/phi-4-reasoning-plus:free
                                microsoft/phi-4-reasoning:free
                                opengvlab/internvl3-14b:free
                                deepseek/deepseek-prover-v2:free
                                qwen/qwen3-235b-a22b:free
                                tngtech/deepseek-r1t-chimera:free
                                arliai/qwq-32b-arliai-rpr-v1:free
                                agentica-org/deepcoder-14b-preview:free
                                nvidia/llama-3.1-nemotron-ultra-253b-v1:free
                                meta-llama/llama-4-maverick:free
                                meta-llama/llama-4-scout:free
                                deepseek/deepseek-v3-base:free
                                deepseek/deepseek-chat-v3-0324:free
                                featherless/qwerky-72b:free
                                open-r1/olympiccoder-32b:free
                                rekaai/reka-flash-3:free
                                google/gemma-3-27b-it:free
                                deepseek/deepseek-r1-zero:free
                                cognitivecomputations/dolphin3.0-r1-mistral-24b:free
                                cognitivecomputations/dolphin3.0-mistral-24b:free
                                deepseek/deepseek-r1-distill-llama-70b:free
                                deepseek/deepseek-r1:free
                                deepseek/deepseek-chat:free
                                meta-llama/llama-3.3-70b-instruct:free
                                qwen/qwen-2.5-coder-32b-instruct:free
                                qwen/qwen-2.5-72b-instruct:free
                                meta-llama/llama-3.1-405b:free))
           (buffer (url-retrieve-synchronously url nil nil 30)))
      (if (not buffer)
          default-model-ids
        (with-current-buffer buffer
          (unwind-protect
              (progn
                (goto-char (point-min))
                (re-search-forward "^$")
                (forward-char)
                (let* ((json-object-type 'hash-table)
                       (json-array-type 'list)
                       (json-key-type 'string)
                       (json-response (json-read))
                       (models (gethash "data" json-response))
                       (model-ids (mapcar (lambda (model)
                                            (gethash "id" model))
                                          models)))
                  model-ids))
            (kill-buffer buffer))))))

  (set-popup-rule! "^\\*\\(?:ChatGPT\\|OpenRouter\\)\\*$"
    ;; (concat "^" (regexp-opt (mapcar 'regexp-quote '("*ChatGPT*" "*OpenRouter*"))) "$")
    :side 'right
    :size 0.4
    ;; :vslot 100
    :quit nil)

  :config
  (defvar gptel--backends-initialized nil)
  (defun gptel-init-backends (&rest _)
    "Initialize GPTel backends upon first use."
    (unless gptel--backends-initialized
      (setq! gptel--openrouter
             (gptel-make-openai "OpenRouter"
               :stream nil
               :host "openrouter.ai"
               :key (lambda ()
                      (or (auth-source-pick-first-password :host "openrouter.ai")
                          (user-error "GPTel: OpenRouter API key not found in auth-source")))
               :endpoint "/api/v1/chat/completions"
               :models
               (openrouter-get-model-ids))
             gptel-backend gptel--openrouter
             gptel-default-mode 'org-mode
             gptel-temperature 0.8
             gptel-model 'deepseek/deepseek-chat:free
             gptel--backends-initialized t
             gptel-directives
             '((default . "You are a large language model living in Emacs and a helpful assistant. Respond concisely.")
               (programming . "You are a large language model and a careful programmer. Provide code and only code as output without any additional text, prompt or note.")
               (writing . "You are a large language model and a writing assistant. Respond concisely.")
               (chat . "You are a large language model and a conversation partner. Respond concisely.")))))
  (advice-add 'gptel :before #'gptel-init-backends)
  (advice-add 'gptel-send :before (lambda (&rest _) (gptel-init-backends)))

  (setq! gptel-post-response-functions nil)
  (add-hook! 'gptel-post-response-functions '+gptel-save-buffer))

(use-package! aider
  :after helm
  :init
  (set-popup-rule! (regexp-quote "*aider:")
    :side 'right
    :size 0.4
    :vslot 50
    :quit nil)
  :bind (:map global-map ("C-c A" . aider-transient-menu))
  :config
  (defvar aider--backends-initialized nil)
  (defun aider-init-backends (&rest _)
    "Init aider backend"
    (unless aider--backends-initialized
      (setenv "OPENROUTER_API_KEY" (auth-source-pick-first-password
                                    :host "openrouter.ai"
                                    :user "apikey"))
      (setq! aider-args '("--model" "openrouter/google/gemini-2.5-pro") ;; :thinking
             aider-backends-initialized t
             aider-read-string-history nil)))

  (advice-add 'aider-run-aider :around
              (lambda (orig-fn &rest args)
                "Ensure backends are initialized before running Aider."
                (aider-init-backends)
                (apply orig-fn args)))

  :custom
  (aider-popular-models '("openrouter/deepseek/deepseek-chat"
                          "openrouter/openai/gpt-4.1"
                          "openrouter/anthropic/claude-sonnet-4"
                          "openrouter/anthropic/claude-opus-4"
                          "openrouter/google/gemini-2.5-pro"
                          "openrouter/google/gemini-2.5-flash")))

(use-package! ob-aider
  :after org
  :config
  (add-to-list 'org-babel-load-languages '(aider . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
#+end_src
** color-rg
:PROPERTIES:
:ID:       ac172945-07cc-4347-ac62-6281015209ff
:END:

:tangle packages.el
#+begin_src emacs-lisp
(package! color-rg
  :recipe (:host github
           :repo "manateelazycat/color-rg"
           :files "*"
           :branch "master")
  :pin t)

;; (package! color-rg)
#+end_src

:pin "e45bedec545c044accf307532b3c50dbb9ab2b66"

:tangle config.el
#+begin_src emacs-lisp
(use-package! color-rg
  :commands (color-rg-search-input
             color-rg-search-symbol
             color-rg-search-input-in-project)
  :bind
  (:map isearch-mode-map
   ("M-s M-s" . isearch-toggle-color-rg)))
#+end_src

* Language support
:PROPERTIES:
:ID:       7edbd775-c01f-4c6b-8ec9-2d931a96718a
:END:
** Indent Guides
:PROPERTIES:
:ID:       09cf20ed-d0c3-4038-9198-bab598ca65ec
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! highlight-indent-guides)
#+end_src

- I only wish to have it in certain modes:
#+begin_src emacs-lisp :tangle config.el
(use-package! highlight-indent-guides
  :hook ((yaml-mode conf-mode python-mode) . highlight-indent-guides-mode)
  :init
  (setq! highlight-indent-guides-method 'character
         highlight-indent-guides-suppress-auto-error t)
  :config
  (defun +indent-guides-init-faces-h (&rest _)
    (when (display-graphic-p)
      (highlight-indent-guides-auto-set-faces)))

  ;; HACK `highlight-indent-guides' calculates its faces from the current theme,
  ;;      but is unable to do so properly in terminal Emacs, where it only has
  ;;      access to 256 colors. So if the user uses a daemon we must wait for
  ;;      the first graphical frame to be available to do.
  (add-hook 'doom-load-theme-hook #'+indent-guides-init-faces-h)
  (when doom-theme
    (+indent-guides-init-faces-h))

  ;; `highlight-indent-guides' breaks when `org-indent-mode' is active
  (add-hook! 'org-mode-local-vars-hook
    (defun +indent-guides-disable-maybe-h ()
      (and highlight-indent-guides-mode
           (bound-and-true-p org-indent-mode)
           (highlight-indent-guides-mode -1)))))

#+end_src

** TODO tree-sitter
:PROPERTIES:
:ID:       9629d4ed-eb5b-401e-bb54-332d7aad622c
:END:
As a workaround for nixpkgs [[https://github.com/marienz/nix-doom-emacs-unstraightened?tab=readme-ov-file#tree-sitter-error-on-initialization-with-file-error-opening-output-file-read-only-file-system][bug]]

#+begin_src emacs-lisp
(package! treesit-auto
  :type 'core
  :pin "016bd286a1ba4628f833a626f8b9d497882ecdf3"
  :recipe (:host github
           :repo "renzmann/treesit-auto"
           :branch "main"))
#+end_src

However, this borks up the nixd
#+begin_src emacs-lisp
(use-package! treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src
** Nix
:PROPERTIES:
:ID:       a8fc8a2f-1295-4587-a227-896decf5e784
:END:

#+begin_src emacs-lisp :tangle packages.el
;; (package! lsp-mode
;;   :type 'core
;;   :pin "a478e03cd1a5dc84ad496234fd57241ff9dca57a" ;; v9.0.0
;;   :recipe (:host github
;;            :repo "emacs-lsp/lsp-mode"
;;            :branch "master"))

(package! nix-mode
  :type 'core
  :pin "719feb7868fb567ecfe5578f6119892c771ac5e5"
  :recipe (:host github
           :repo "NixOS/nix-mode"
           :branch "master"))

;; (package! nix-ts-mode
;;   :type 'core
;;   :pin "62ce3a2dc39529c5db3516427e84b2c96b8efcfd"
;;   :recipe (:host github
;;            :repo "nix-community/nix-ts-mode"
;;            :branch "trunk"))

(package! nixpkgs-fmt
  :type 'core
  :pin "1f6fb42a5439589c44d99c661cc76958520323cc"
  :recipe (:host github
           :repo "purcell/emacs-nixpkgs-fmt"
           :branch "master"))
#+end_src

nixd setup function
#+begin_src emacs-lisp :tangle config.el
;; (after! lsp-mode
;;   ;; Log all JSON exchanged with the server
;;   (setq lsp-log-io t)
;;   ;; Trace at the server level (if supported)
;;   (setq lsp-server-trace '("verbose"))
;;   (setq lsp-completion-provider :capf)
;;   ;; Optional: automatically open the log buffer on workspace start
;;   (setq lsp-auto-show-log-buffer t)
;;   (add-hook 'lsp-mode-hook #'lsp-completion-mode))

;; (trace-function 'lsp-completion-at-point)
;; (trace-function-background 'corfu--collect-matching-text)

;; (advice-add 'corfu--collect-matching-text :around
;;             (lambda (orig &rest args)
;;               (message "[Corfu] args: %S" args)
;;               (apply orig args)))
;; (advice-add #'vertico--exhibit :around
;;             (lambda (orig &rest args)
;;               (condition-case e
;;                   (apply orig args)
;;                 ((debug error)
;;                  (signal (car e) (cdr e)))))

;; (setq debug-on-error t)  ;; ensure we catch it :contentReference[oaicite:5]{index=5}

;; ------------------------------------------------------------
;; LSP-Mode + nixd + Corfu/Vertico Debug & Completion Integration
;; ------------------------------------------------------------

(after! lsp-mode
  (defun ignore-semgrep-rulesRefreshed (_workspace notification)
    "Ignore semgrep/rulesRefreshed notifications."
    (when (string= (gethash "method" notification) "semgrep/rulesRefreshed")
      (lsp--info "Ignored semgrep/rulesRefreshed notification")
      t))
  (advice-add 'lsp--on-notification :before-until #'ignore-semgrep-rulesRefreshed))

(use-package! lsp-mode
  :commands (lsp lsp-deferred)
  :init
  ;; Use standard CAPF for completions
  (setq! lsp-completion-provider :capf)
  (add-hook 'lsp-mode-hook #'lsp-completion-mode)
  (add-hook 'lsp-completion-mode-hook
            (lambda ()
              (setq completion-at-point-functions
                    (cons (cape-capf-nonexclusive #'lsp-completion-at-point)
                          (remove #'lsp-completion-at-point completion-at-point-functions)))))

  ;; Interactive helper: call the CAPF function and show candidates
  (defun my/lsp-capf-candidates ()
    "Manually invoke `lsp-completion-at-point` and message its candidates."
    (interactive)
    (let* ((capf   (lsp-completion-at-point))
           (beg    (nth 0 capf))
           (end    (nth 1 capf))
           (fn     (nth 2 capf))
           (input  (buffer-substring-no-properties beg end))
           (cands  (funcall fn input #'identity '(:all))))
      (message "[LSP CAPF] %S" cands)))

  ;; Toggle all debug settings on/off
  (defvar my/lsp-nixd-debug-enabled nil
    "Non-nil if LSP + nixd + Corfu/Vertico debug is enabled.")

  (defun my/toggle-lsp-nixd-debug ()
    "Toggle full debug mode for LSP + nixd + Corfu/Vertico."
    (interactive)
    (setq my/lsp-nixd-debug-enabled (not my/lsp-nixd-debug-enabled))
    (if my/lsp-nixd-debug-enabled
        (progn
          ;; 1) LSP client
          (setq lsp-log-io t
                lsp-server-trace '("verbose")
                lsp-auto-show-log-buffer t)
          ;; 2) nixd args
          (setq lsp-nix-nixd-args '("--log-level" "debug" "--trace" "true"))
          ;; 3) Elisp debugger
          (setq debug-on-error t)
          ;; 4) debug-on-entry & trace
          (debug-on-entry 'lsp-completion-at-point)
          (debug-on-entry 'lsp-completion--create-items)
          (require 'trace)
          (trace-function-background 'lsp-completion-at-point)
          (trace-function-background 'corfu--collect-matching-text)
          ;; 5) Advice Corfu & Vertico
          (advice-add 'corfu--collect-matching-text :around
                      (lambda (orig &rest args)
                        (message "[Corfu] args=%S" args)
                        (apply orig args)))
          (advice-add 'vertico--exhibit :around
                      (lambda (orig &rest args)
                        (condition-case e
                            (apply orig args)
                          ((error)
                           (message "[Vertico] error: %S" e)
                           (signal (car e) (cdr e))))))
          (message "🛠️  LSP‑nixd debug ENABLED"))
      (progn
        ;; Disable everything
        (setq lsp-log-io nil
              lsp-server-trace nil
              lsp-auto-show-log-buffer nil
              lsp-nix-nixd-args nil
              debug-on-error nil)
        (dolist (sym '(lsp-completion-at-point
                       lsp-completion--create-items
                       corfu--collect-matching-text))
          (ignore-errors (untrace-function sym)))
        (advice-remove 'corfu--collect-matching-text #'identity)
        (advice-remove 'vertico--exhibit              #'identity)
        (message "✅ LSP‑nixd debug DISABLED"))))

  :config
  ;; Ensure CAPF is first in the chain
  (add-hook 'lsp-completion-mode-hook
            (lambda ()
              (add-to-list 'completion-at-point-functions
                           #'lsp-completion-at-point t))))

;; ----------------
;; Corfu (UI)
;; ----------------
(use-package! corfu
  :after lsp-mode cape
  :init
  (global-corfu-mode)                       ; enable Corfu everywhere
  (setq corfu-auto t
        corfu-cycle t
        corfu-separator ?\s))

;; ----------------
;; Vertico (minibuffer)
;; ----------------
(use-package! vertico
  :init
  (vertico-mode))

;; ----------------
;; Cape: Compose multiple CAPFs
;; ----------------
(use-package! cape
  :after corfu
  :init
  ;; Add various Cape backends—wrapped non-exclusively
  (dolist (fn '(cape-file
                cape-dabbrev
                cape-history
                cape-line))
    (add-to-list 'completion-at-point-functions
                 (cape-capf-nonexclusive fn))))


(defun local/print-nixd-capabilities ()
  "Print the capabilities of the `nixd` language server."
  (interactive)
  (let* ((workspace (lsp-find-workspace 'nixd-lsp nil))
         (capabilities (when workspace
                         (lsp--workspace-server-capabilities workspace))))
    (if capabilities
        (with-output-to-temp-buffer "*nixd Capabilities*"
          (princ (json-encode capabilities)))
      (message "nixd language server is not active in the current buffer."))))

(defun local/setup-nixd ()
  ;; TODO: https://github.com/nix-community/nixd/issues/651
  (when (getenv "PRJ_ROOT")
    (let* ((prj_root (getenv "PRJ_ROOT"))
           (username (getenv "USER"))
           (hostname (with-temp-buffer (call-process "hostname" nil t nil)
                                       (string-trim (buffer-string))))
           (flakeref (format "(builtins.getFlake \"%s\")" prj_root))
           (options-nixos (format "%s.nixosConfigurations.nixos-%s.options" flakeref hostname))
           (options-home-manager (format "%s.homeConfigurations.home-nixd.options" flakeref)))
      (setq! lsp-nix-nixd-server-path "nixd"
            lsp-nix-nixd-server-arguments '("--semantic-tokens=true" "--inlay-hints=true")
            lsp-nix-nixd-formatting-command [ "nixpkgs-fmt" ]
            lsp-nix-nixd-nixpkgs-expr "import <nixpkgs> { }"
            lsp-nix-nixd-nixos-options-expr options-nixos
            lsp-nix-nixd-home-manager-options-expr options-home-manager
            ;; NOTE: otherwise, lsp-mode errors out on hash-table-p
            lsp-use-plists nil))))
#+end_src

#+begin_src emacs-lisp :tangle config.el
;; (use-package! nix-ts-mode
;;   :after lsp-mode
;;   :custom
;;   (lsp-disabled-clients  '(nix-nil nix-rnix))
;;   :config
;;   (local/setup-nixd))

(use-package! nix-mode
  :after lsp-mode
  :hook
  ((nix-mode . lsp-deferred)
   (nix-mode . (lambda () (setq company-idle-delay 0.1))))
  :custom
  (lsp-disabled-clients  '(nix-nil nix-rnix))
  :config
  (local/setup-nixd))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(defun +nix/nix-format-buffer (orig-fun &rest buf)
  "save restore position after formatting"
  (let ((saved-pos (line-number-at-pos)))
    (apply orig-fun buf)
    (forward-line saved-pos)
    (recenter-top-bottom)))

(advice-add 'nix--format-call :around #'+nix/nix-format-buffer)

(use-package! nixpkgs-fmt
  :defer t
  :config
  (setq! nix-nixfmt-bin "nixpkgs-fmt")
  :hook (nix-mode . nixpkgs-fmt-on-save-mode)
        ;; (nix-ts-mode . nixpkgs-fmt-on-save-mode)
        )
#+end_src

Also, needs to complete from pkgs and lib and project buffers
** Crystal
:PROPERTIES:
:ID:       97778f98-8df4-4b85-a63e-8d9aa585749d
:END:
#+begin_src emacs-lisp :tangle config.el
(after! crystal-mode
  (defun +crystal/crystal-format-buffer (&rest _)
    "Format current Crystal buffer using `crystal tool format`, preserving point and mode."
    (when (and buffer-file-name (eq major-mode 'crystal-mode))
      (save-buffer)  ;; save current buffer first
      (let ((line (line-number-at-pos))
            (col (current-column))
            (file buffer-file-name))
        (let ((exit-code (call-process "crystal" nil "*crystal-format*" nil "tool" "format" file)))
          (if (zerop exit-code)
              (progn
                ;; Use preserve-modes to keep crystal-mode after revert
                (revert-buffer :ignore-auto :noconfirm :preserve-modes)
                (goto-char (point-min))
                (forward-line (1- line))
                (move-to-column col)
                (recenter-top-bottom))
            (message "crystal format failed, see *crystal-format* buffer"))))))

  ;; Option 1: Add to save hook (preferred if you want this to run always)
  (add-hook 'crystal-mode-local-vars-hook
            (lambda () (add-hook 'before-save-hook #'+crystal/crystal-format-buffer nil t)))

  ;; Option 2: If you prefer to integrate with Doom's `format!`, advise it
  ;; (advice-add 'crystal-tool-format :override #'+crystal/crystal-format-buffer)
  )
#+end_src
** D2 - diagramming
:PROPERTIES:
:ID:       0e75795a-5120-4c98-821d-e568752e17c2
:END:
This is likely better than plantuml
#+begin_src emacs-lisp :tangle packages.el
(package! d2-mode
  :pin "e1fc7d6c1915acaf476060c0f79b8bdef6bd1952"
  :recipe (:host github
           :repo "andorsk/d2-mode"
           :branch "main"))
#+end_src

:tangle config.el
#+begin_src emacs-lisp
(use-package! d2-mode
  :init
  (map! :map d2-mode-map
        :localleader "c" #'d2-compile))
#+end_src
** TODO LSP in docker
:PROPERTIES:
:ID:       dee2c380-4b19-4edb-8312-c9729cae00de
:END:
[[https://github.com/emacs-lsp/lsp-docker][Uses docker to run language servers]]
* Spoken languages support
:PROPERTIES:
:ID:       0005284c-0512-4f67-9e1e-2cee73314172
:END:
** Russian phonetic
:PROPERTIES:
:ID:       dabd0429-a392-4187-9084-9df8f84b8d27
:END:
#+begin_src emacs-lisp :tangle config.el
(quail-define-package
 "russian-phonetic" "Cyrillic" "[Русский]" nil
 "ЯЖЕРТЫ Phonetic layout"
 nil t t t t nil nil nil nil nil t)

(quail-define-rules
 ("1" ?1)
 ("2" ?2)
 ("3" ?3)
 ("4" ?4)
 ("5" ?5)
 ("6" ?6)
 ("7" ?7)
 ("8" ?8)
 ("9" ?9)
 ("0" ?0)
 ("-" ?-)
 ("=" ?ь)
 ("`" ?ю)
 ("q" ?я)
 ("w" ?ж)
 ("e" ?е)
 ("r" ?р)
 ("t" ?т)
 ("y" ?ы)
 ("u" ?у)
 ("i" ?и)
 ("o" ?о)
 ("p" ?п)
 ("[" ?ш)
 ("]" ?щ)
 ("a" ?а)
 ("s" ?с)
 ("d" ?д)
 ("f" ?ф)
 ("g" ?г)
 ("h" ?ч)
 ("j" ?й)
 ("k" ?к)
 ("l" ?л)
 (";" ?\;)
 ("'" ?')
 ("\\" ?э)
 ("z" ?з)
 ("x" ?х)
 ("c" ?ц)
 ("v" ?в)
 ("b" ?б)
 ("n" ?н)
 ("m" ?м)
 ("," ?,)
 ("." ?.)
 ("/" ?/)

 ("!" ?!)
 ("@" ?@)
 ("#" ?ё)
 ("$" ?Ё)
 ("%" ?ъ)
 ("^" ?Ъ)
 ("&" ?&)
 ("*" ?*)
 ("(" ?\()
 (")" ?\))
 ("_" ?_)
 ("+" ?Ь)
 ("~" ?Ю)

 ("Q" ?Я)
 ("W" ?Ж)
 ("E" ?Е)
 ("R" ?Р)
 ("T" ?Т)
 ("Y" ?Ы)
 ("U" ?У)
 ("I" ?И)
 ("O" ?О)
 ("P" ?П)
 ("{" ?Ш)
 ("}" ?Щ)
 ("A" ?А)
 ("S" ?С)
 ("D" ?Д)
 ("F" ?Ф)
 ("G" ?Г)
 ("H" ?Ч)
 ("J" ?Й)
 ("K" ?К)
 ("L" ?Л)
 (":" ?:)
 ("\"" ?\")
 ("|" ?Э)
 ("Z" ?З)
 ("X" ?Х)
 ("C" ?Ц)
 ("V" ?В)
 ("B" ?Б)
 ("N" ?Н)
 ("M" ?М)
 ("<" ?<)
 (">" ?>)
 ("?" ??))

(setq default-input-method "russian-phonetic")
#+end_src
** TODO translation services
:PROPERTIES:
:ID:       e60ff69f-97c9-41dd-bdda-aa2f01e86000
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! plz
  :type 'core
  :pin "e2d07838e3b64ee5ebe59d4c3c9011adefb7b58e"
  :recipe (:host github
           :repo "alphapapa/plz.el"
           :branch "master"))

(package! go-translate
  :type 'core
  :pin "a924e0bd6b37d424c222377982e6f71a4ddf4452"
  :recipe (:host github
           :repo "lorniu/go-translate"
           :branch "master"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! go-translate
  :config
  (setq! ;; gt-langs '(de en)
         ;; gt-default-translator (gt-translator :engines (gt-google-engine))
         gt-preset-translators
         `((ts-1 . ,(gt-translator
                     :taker (gt-taker :langs '(de en)
                                      :text 'word)
                     :engines (gt-bing-engine)
                     :render (gt-overlay-render)))
           (ts-2 . ,(gt-translator
                     :taker (gt-taker :langs '(en de ru)
                                      :text 'sentence)
                     :engines (gt-google-engine)
                     :render (gt-buffer-render)))
           (ts-3 . ,(gt-translator
                     :taker (gt-taker :langs '(en de ru)
                                      :text 'buffer
                                      :pick 'word
                                      :pick-pred (lambda (w) (length> w 6)))
                     :engines (gt-google-engine)
                     :render (gt-overlay-render :type 'help-echo))))))
#+end_src
* Look and feel
:PROPERTIES:
:ID:       06d2f17b-771d-4c77-89fd-2d080d626f7d
:END:
** Theme
:PROPERTIES:
:ID:       f35d164e-97e4-4a31-87f7-f41029560ce5
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! solarized-theme)
(package! base16-theme)
(package! color-theme-sanityinc-solarized
  :recipe (:host github :repo "purcell/color-theme-sanityinc-solarized"))

(after! doom-modeline
  (set-face-attribute 'doom-modeline-bar-inactive nil :background 'unspecified))
#+end_src

[] #ff8100 is the color of amber old monochrome terminals

#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'solarized-dark)
#+end_src
** Fonts
:PROPERTIES:
:ID:       675bc166-bdde-477f-a320-25a1915e2bca
:END:
For whatever reason, emacs doesn't want to properly render font sizes, might have something to do with doom or perhaps some other part of this config.
#+begin_src emacs-lisp :tangle config.el
(defun font-size-by-emacs-version ()
  "Native-comp and GTK support only come in emacs 29 and later."
  ;; FIXME: not using MATE anymore, make it work with hyprland
  (let ((gtk-scaling-factor (string-to-number (shell-command-to-string "dconf read /org/mate/desktop/interface/window-scaling-factor")))
        (env-font-size (string-to-number (getenv "HM_FONT_SIZE"))))
    (if (<= emacs-major-version 28)
        (+ (* env-font-size gtk-scaling-factor) 3)
      (+ env-font-size 3))))

(let* ((env-default-font (font-spec
                          :family (getenv "HM_FONT_NAME")
                          :size (font-size-by-emacs-version)
                          :weight 'normal)))
  (setq doom-font-increment 1
        doom-font env-default-font
        doom-variable-pitch-font env-default-font
        doom-serif-font env-default-font))
#+end_src
* Performance improvements
:PROPERTIES:
:ID:       30f827b2-cfa0-40a8-a666-e3de999e3813
:END:

#+begin_src emacs-lisp :tangle config.el
(setq gcmh-high-cons-threshold most-positive-fixnum
      max-specpdl-size 100000)
#+end_src
** Very Large Files
:PROPERTIES:
:ID:       0150ee21-90d1-46a7-a98b-f8d5b7cd198c
:END:
Perhaps a better option is [[https://github.com/m00natic/vlfi][vlfi]] - it seems a bit newer

#+begin_src emacs-lisp :tangle packages.el
(package! vlf)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! vlf
  :config
  (require 'vlf-setup)
  (custom-set-variables
   '(vlf-application 'dont-ask)))
#+end_src

** TODO Littering and file locations
:PROPERTIES:
:ID:       1de478ac-3786-4201-b59c-21af6273ab66
:END:
savehist-file persp workspaces

* nyxt-browser integration
:PROPERTIES:
:ID:       eaee2c77-fe9d-4e6f-9fc9-aad823311694
:END:
** Sly
:PROPERTIES:
:ID:       9ec2bb07-88b4-4e29-9d78-5dab6ae19307
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! sly
  :pin "c48defcf58596e035d473f3a125fdd1485593146"
  :recipe (:host github
           :repo "joaotavora/sly"
           :branch "master"))
;; TODO: https://github.com/joaotavora/sly-stepper
;; TODO: https://github.com/40ants/sly-package-inferred
(package! sly-asdf
  :pin "6f9d751469bb82530db1673c22e7437ca6c95f45"
  :recipe (:host github
           :repo "mmgeorge/sly-asdf"
           :branch "master"))
(package! sly-overlay
  :pin "d62945059035f8097a6f222ed2700cfd99609d11"
  :recipe (:host github
           :repo "fosskers/sly-overlay"
           :branch "master"))
(package! sly-quicklisp
  :pin "34c73d43dd9066262387c626c17a9b486db07b2d"
  :recipe (:host github
           :repo "joaotavora/sly-quicklisp"
           :branch "master"))
(package! sly-macrostep
  :pin "5113e4e926cd752b1d0bcc1508b3ebad5def5fad"
  :recipe (:host github
           :repo "joaotavora/sly-macrostep"
           :branch "master"))
(package! sly-repl-ansi-color
  :pin "b9cd52d1cf927bf7e08582d46ab0bcf1d4fb5048"
  :recipe (:host github
           :repo "PuercoPop/sly-repl-ansi-color"
           :branch "master"))
(package! sly-named-readtables
  :pin "a5a42674ccffa97ccd5e4e9742beaf3ea719931f"
  :recipe (:host github
           :repo "joaotavora/sly-named-readtables"
           :branch "master"))
(package! helm-sly
  :pin "3691626c80620e992a338c3222283d9149f1ecb5"
  :recipe (:host github
           :repo "emacs-helm/helm-sly"
           :branch "master"))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! sly
  :init (setq sly-ignore-protocol-mismatches t
              sly-compile-file-options (list :fasl-directory "/tmp")))
(use-package! sly-asdf :after sly)
(use-package! sly-overlay :after sly)
(use-package! sly-quicklisp :after sly)
(use-package! sly-macrostep :after sly)
(use-package! sly-repl-ansi-color :after sly)
(use-package! sly-named-readtables :after sly)
(use-package! helm-sly :after sly)

(defun sly-nyxt-start ()
  (interactive)
  (sly-connect "127.0.0.1" 4006)
  (sleep-for 2)
  (when (buffer-live-p (get-buffer "*sly-mrepl for sbcl*"))
    (set-buffer "*sly-mrepl for sbcl*")
    (sly-mrepl--eval-for-repl `(slynk-mrepl:guess-and-set-package "NYXT-USER"))))

(defun sly-nyxt-stop ()
  (interactive)
  (sly-disconnect-all)
  (kill-buffer (get-buffer "*sly-mrepl for sbcl*")))
#+end_src
* setts
:PROPERTIES:
:ID:       6ab648f4-89ab-4cbd-a769-382ce2f98263
:END:
** TODO gpg
:PROPERTIES:
:ID:       0c3e6dbe-3d25-456e-a070-ec2b3be58d72
:END:

#+begin_src nix :tangle nil
{
  home.sessionVariables = {
    ORG_CRYPT_KEY = "E203A151BB3FD1AE";
    ORG_EPA_FET = "vod@njk.li";
  };
}
#+end_src
[[https://www.gnu.org/software/emacs/manual/html_mono/epa.html][Reference]]
TODO: move it to local-setts in Nix
#+begin_src emacs-lisp :tangle config.el
(use-package! org-crypt
  :config
  (org-crypt-use-before-save-magic)
  (setq org-crypt-key "D299B0B3CCB1D97714DAD6A154CA4193F1572167"
        epa-file-encrypt-to '("v@njk.li" "vod@njk.li" "voobofdoom@njk.li")
        org-tags-exclude-from-inheritance (quote ("crypt"))))
#+end_src

** uncategorized
:PROPERTIES:
:ID:       662e686c-87ef-4739-b50e-b7b972cfe496
:END:
#+begin_src emacs-lisp :tangle config.el
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

(setq-default history-length 1000
              x-stretch-cursor t)

(global-visual-line-mode t)

(setq!
 calendar-week-start-day 1
 org-src-fontify-natively t
 comp-async-jobs-number 24
 display-line-numbers-type nil
 create-lockfiles nil
 search-highlight t
 query-replace-highlight t
 require-final-newline t
 dired-dwim-target t
 tab-always-indent 'complete
 company-idle-delay 0.5
 company-minimum-prefix-length 2
 company-transformers nil
 company-show-numbers t)

(add-hook 'dired-mode-hook (lambda () (dired-async-mode 1)))

(map! "M-i" #'windmove-up
      "M-k" #'windmove-down
      "M-j" #'windmove-left
      "M-l" #'windmove-right

      "s-[" #'winner-undo
      "s-]" #'winner-redo

      "M-[" #'previous-buffer
      "M-]" #'next-buffer

      ;; [s-up] #'windmove-up
      ;; [s-down] #'windmove-down
      ;; [s-left] #'windmove-left
      ;; [s-right] #'windmove-right

      "s-=" #'text-scale-increase
      "s--" #'text-scale-decrease
      "s-<return>" #'toggle-frame-fullscreen
      "C-x C-y" #'+default/yank-pop
      "C-x f" #'helm-recentf
      ;; "C-x b" #'helm-projectile-switch-to-buffer
      "C-x s-b" #'projectile-find-file-dwim
      ;; "s-t" #'+treemacs/toggle
      "M-s-." #'mc/mark-next-like-this
      "M-s-," #'mc/mark-previous-like-this
      "M-s-SPC" #'mc/mark-all-like-this
      "s-SPC" #'set-rectangular-region-anchor

      "C-<escape>" #'+vterm/toggle

      :map prog-mode-map
      :nie "s-." #'helm-semantic-or-imenu
      :nie "s-/" #'comment-or-uncomment-region
      :nie "s-;" #'comment-dwim

      :map helm-find-files-map
      "<left>" #'helm-find-files-up-one-level
      "<right>" #'helm-execute-persistent-action)

(add-hook! 'before-save-hook 'font-lock-flush)
#+end_src

** dir-locals stuff
:PROPERTIES:
:ID:       83844d45-ed87-42a2-87da-1cd7c774d9c2
:END:
#+begin_src emacs-lisp :tangle config.el
(after! hack-local-variables
  (add-hook 'hack-local-variables-hook
            (lambda ()
              (when (file-equal-p (expand-file-name "~/Projects/hive") (projectile-acquire-root))
                (setq enable-local-variables :all)))))
#+end_src
** local-setts from nix config
:PROPERTIES:
:ID:       3fd87dc2-bc4b-4a4b-aaef-e72db239a7ff
:END:
#+begin_src emacs-lisp :tangle packages.el
(package! local-setts :built-in t)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(use-package! local-setts
  :config
  (load-nix-setts))
#+end_src
